Javascript DOM Notes : Section -> 13

DOM concept 

//Selecting Element(s)
NodeList :   document.querySelectorAll(' .submitBtn ')
It's not live

HTMLCollection : document.getElementsByTagName('button') or ByClassName
It's live means if you will delete any element than the HTML collection will also reflect



// Creating and inserting elements 
const message = document.createElement('div');

// add class to the element
message.classlist.add('cookie-message');

// add text to the element
message.textContent = 'We use cookies for improved functionality and analytics'
(OR)
message.innerHTML = `We use cookies for improved functionality and analytics <button class='btn-close'>Ok, Got it</button>` 

// now show that in our website
const parentContainer = document.querySelector('#fullscreen')
parentContainer.prepend(message)
- the newly created will be now our first child in the fullscreen element

parentContainer.append(message)
- the newly created will be now our last child in the fullscreen element

Note :  It can't be at multiple places by using append & prepend both

Note : append & prepend will bring the created element inside the 'parentContainer' body

before(message)  
this will  bring the created element before the parentContainer , outside it and before it

aftere(message)
this will  bring the created element after the parentContainer , outside it and after it


//Remove an element
element.remove()
document.querySelector('.cookie-message').addEventListener( 'click' , ()=> { message.remove()  } )


//-------------Styles-----------
getComputedStyle(element) 

To know the styles of some element we can't get it directly using :
 console.log(message.style.height)
To get we can use getComputedStyle() :
 console.log( getComputedStyle( message ) )  ------> object of style like , height,width,bgcolor,color....
 //to get the specific property value : 
console.log ( getComputedStyle( message ).height )

//to know a custom attribute value that is created by us and not by html
const logo = document.querySelector(#logo);
<img id='logo'  alt =''logoCompany' src='https://www.logo.com'  designer=''Jonas''/>
console.log(logo.alt)   --> will print the value
console.log(logo.src)   --> will print the value
- console.log(logo.designer)   --> will print undefined 
--> to print : console.log( logo.getAtrribute('designer') );    ---> "Jonas" 

//to set an attribute 
logo.setAttribute( 'company','bankist minimalist logo' )


// data Attribute
<img id='logo'  alt =''logoCompany' src='https://www.logo.com'  designer=''Jonas' data-version-number= '3.0'/>
console.log(logo.dataset.versionNumber);


// classes
logo.classlist.add('c' , 'j')
logo.classlist.remove('c', 'j')
logo.classlist.toggle('c')
logo.classlist.contains('c')





------------------------------------------------------------------------------------------------------------------
next day


//smooth scrolling

const btnScrollTo = document.querySelector('.btn-scroll-to');    // clicking this button will make scrolling
const section1 = document.querySelector('#section--1');        // section we wnt to see when we click the btn

btnScrollTo.addEventListener( ' click ' , (event)=>{
   //select the section you want to scrolled to then apply .scrollIntoView method which takes an object with behavior attribute to 'smooth'

  section1.scrollIntoView( { behavior : 'smooth' } )    // it works
})




// types of events
to add event we use .addEventListener('click',alertMsg)
to remove event we use  .removeEventListener('click',alertMsg)

like : 
const h1 = document.querySelector('h1');
const alertMsg =  function( )  {  
   alert(' You are reading the headline as you have your mouse over the heading !!');
   h1.removeEventListener('mouseenter', alertMsg )
 }

h1.addEventListener('mouseenter' , alertMsg )




// bubbling and capturing

document >html > body > section > p > a.link

Suppose the click element happens, we know that our click event will right generates, so that event is actually not generated at the target element, but it generates in the root of the document i.e very top of the DOM element.
From there, the so-called capturing phase happens,  where the event then travels all the way down to the target element and it will pass to every parent element i.e html --> body --> section --> p --> a.link ( target element )

As soon as the event reaches the target, target phase begins, where events can be handled right at the target using Event Listeners and then the attach function is executed and this all happens in the target phase.

After reaching the target, the event then travels all the way up to the document route again : 
a.link  --> p --> section --> body --> html --> document 
this is called bubbling phase

To understand well : check udemy 191 video , Amazing example 
to stop propogation : e.stopPropagation()





// Trick for scrolling to different link sections as per the link
multiple links like about (#section--1), contact ( #section--2 ) ,features  ( #section--3 ) having same class = 'nav-links'

//Scroll to the respected section
const allLinks = document.querySelectorAll('.nav__link');
allLinks.forEach(ele => {
  ele.addEventListener('click', e => {
    e.preventDefault();
    const id = ele.getAttribute('href');
    document.querySelector(id).scrollIntoView({ behavior: 'smooth' });
  });
});



// Above we are attaching the same function to all 3 elements, which is handy for now but what if we have 1000s of links elements? then it might reduce our application performance...
for that, we will use event delegation, where the parent's function i.e ( ' .nav__links'  ) is used by the child elements  ( ' .nav__link ') 
Approach :
 1. Add event listener to common parent element
 2. Determine what element originated the event
 3. Avoid other clicks events, only click to links should be take into consideration

document.querySelector('.nav__links').addEventListener('click', e => {
  e.preventDefault();
  if (e.target.classList.contains('nav__link')) {
    const id = e.target.getAttribute('href');
    document.querySelector(id).scrollIntoView({ behavior: 'smooth' });
  }
});







-------------------------------------------------------------------------------------------------------------------------
Dom traversing

How to generate a random color : 
const randomColor = (min,max) => { 
 const colorCode = Math.floor(   Math.random() * (min-max +1 )  + min );
 return colorCode;
 }

const color = () => `rgb(${ randomColor(0,255) , ${ randomColor(0,255) , ${ randomColor(0,255)   })`
  color = rgb(123,38,93)

<html>
   <body>
            <div class='grandparent' id='grandparrent-id'>
                       <div class='parent'>
                                  <div clas='child' id='child-one' ></div>
                                  <div clas='child' id='child-two'></div>
                        </div>
                        <div class='parent'>
                                  <div clas='child'></div>
                                  <div clas='child'></div>
                        </div>
            </div>
    </body>
</html>



Tips and tricks :  
selecting elemet by id : 

const grandparent = document.getElementById('grandparent-id')
function changeColor( element ) {  
      element.style.backgroundColor = '#333';
}
changeColor( grandparent ); 

selecting elements by classname

const parents = document.getElementsByClassName('parent')   ----> this will return an collection and we can't use forEach with collection
// so make it an array

const parents = Array.from(document.getElementsByClassName( 'parent' ))
parents.forEach( ( element )  => changeColor(element))


//  if you are using querySelectorAll then we don't have to make an Array.from( ) 


children keyword :  used to get the children elements of that element, it will return html collection so nonproblem but you can't use forEach so use Array.from(htmlcollection)

const grandparent = document.querySelector('.grandparend');
const parents = Array.from ( grandparent.children )
parents.forEach( ( element) => changeColor(element)  )     //only parent element's color will be change and not child


const parentOne = parents[0]
const children = parentOne.children

changeColor(children[0])     // first parents first child's color will be changed

// So till yet we understood how to go down the DOM, lets' go up from the bottom
const childOne = document.querySelector('#child-one');
changeColor(childOne)

//So to select the parent element use .parentElement
const parent = childOne.parentElement
changeColor(parent)    ----> 1st parent color will be changed

// to change the color of grandparent element
const grandparent = parent.parentElement
changeColor(grandparent)


// what if you don't want to touch the parent from the child and want to call grandparent without callling parent element?
//We will use .closest
const childOne = document.querySelector('#child-one');
const grandparent = childOne.closest(' .grandparent ')

--closest works very similar to querySelectore except for it moves upwards instead of moving downwards, so you can pass it a selector in our case, our grandparent has the class of grandparent and what closest does is it select the closest parent element that has this selector

-- so now we know how to go down the DOM , up the down, now we will learn how to go side by side means : going through siblings like in parentOne there are 2 child and we have selected the child one of parentOne and we want to access childtwo of the parentOne that means childOne and childTwo are sibling and we want to access one sibling from another, for that we will use nextElementSibling
 
const childOne = document.querySelector('#child-one');
const childTwo = childOne.nextElementSibling
changeColor(childTwo)  ----> now the color of child two of parentOne will be changed

//if you want to move from child two to child one, use previousElementSibling
const childTwo = documet.querySelector('#child-two');
const childOne = childTwo.previousElementSibling
changeColor(childOne)



// we also have firstElementChild, lastElementChild, as the name suggest what they do so no more description on that.



















---------------------------------------------------------------------------------------------------------------------
New day after many days 



// Video : 194 ; tabbed feature clicking on the button shows the user the relevant content
// div : operations  -- > div.operations__tab-container  --> button(.btn operations__tab operations__tab--1 operations__tab--active)
// Followed with div.operations__content operations__content--1, div.operations__content operations__content--2, div.operations__content operations__content--3
// And all divs content hav dataset attribute like 1st div content : dataset="1", 2nd div content : dataset="2".. 

const tabContainer = document.querySelector('.operations__tab-container');
const tabButtons = document.querySelectorAll('.operations__tab');
const tabContent = document.querySelectorAll('.operations__content');

// --------------This is a bad practice because what if there are 100s of button, then we have to assign the same function to each and every function🤕
// tabButtons.forEach(tab =>
//   tab.addEventListener('click', () => {
//     console.log('tab');
//   })
// );

//  We will use event delegation again
//  in event delegation we have to attach the event handler to common parent element of all the elements that we are interested in i.e tabButton in our case so our common parent will be tabContainer

tabContainer.addEventListener('click', function (e) {
  const tabClicked = e.target.closest('.operations__tab');
  // console.log(tabClicked); // parent ko dataset value dedo or jab uske child ya woh khud click ho toh parent ki value jaaye : closest('.className')

  // when the tab button is clicked
  if (!tabClicked) return;
  // bringing the active tab button down
  tabButtons.forEach(tab => tab.classList.remove('operations__tab--active'));
  // lifting the clicked tab button
  tabClicked.classList.add('operations__tab--active');

  // remove the current content && Update the content as per tab dataset-tab
  tabContent.forEach((content, i) => {
    content.classList.remove('operations__content--active');
    if (i == tabClicked.dataset.tab - 1) {
      content.classList.add('operations__content--active');
    }
  });

  // ( OR )

  // if (tabClicked) {
  //   tabButtons.forEach(ele => ele.classList.remove('operations__tab--active'));

  //   tabClicked.classList.add('operations__tab--active');
  // }
});







# Menu fade animation


opposite of mouseover  ---> mouseout   ---> over and out
opposite of mouseenter  ---> mouseleave    ---> enter and leave


mouseover and mouseenter are kind of similar but the only difference is mouseenter does not bubble, so when you want to bubble or the thing appliend on parent should be bubble/applied/used by child elements too then use mouseover


to pass an argument in the event handler :
const handleHovers = (e,opacity) =>{
  
  //  when using bind method
  console.log(this);   ---->  0.5 when hover else 1

  if( e.target.classlist.contains('nav__link') ){
    const link = e.target;
    const sibling = link.closest('.nav').querySelectorAll('.nav__links');
    const logo = link.closest('.nav').querySelector('img');
     
     siblings.forEach(ele => {
            if(ele !==link) ele.style.opacity = opacity;
        });
    logo.style..opacity = opacity;
   }
}

///// Approach 1 to pass arguments in the callbacks
nav.AddEventListener('mouseover', function(e)=>{
   handleHovers(e,0.5);
})

nav.AddEventListener('mouseout', function,(e)=>{
   handleHovers(e,1); 
})


///// Approach 2 using bind
nav.AddEventListener('mouseover', handlerhovers.bind(0.5) )

nav.AddEventListener('mouseout', handlerhovers.bind(1))  
// Here bind will return a new function and this will now be the value passed i.e 0.5 and 1











#Sticky navigation : after reaching to a certain section or height, make the nav sticky

// Way 1 to make the nav sticky after certain point
// -----------using scroll event handler------------------

window.addEventListener('scroll', () => {

// console.log(window.scrollY);  // this will give us how much you have scrolled!!
// to make the navbar sticky when once scrolled to some section
// We want distance from top page to that section and we can get it by using getBoundingClientRect(), it gives us lots of details like how far that element is from the page top,bottom,left and right, height and width and other details too.

const distanceFromTop__section1 = section1.getBoundingClientRect().top;
const amountOfScroll = window.scrollY;

if (amountOfScroll > distanceFromTop__section1) {
nav.classList.add('sticky');
} else {
nav.classList.remove('sticky');
}
});



// Way 2
// using web intersection Observer API

const section1 = document.querySelector('#section1');

//Step 1 :  so to use the intersection observer API we need to start by creating a new intersection observer and inside that we have to pass in a callback function and an object of options
const observer = new IntersectionObserver();  

// Step 2 : so now we have to use this observer to basically observe a certain target. So observer and then the method we call on that is observe and then the target element inside the method
observer.observe(section1);

// Step 3 : let create the options that we will put into the intersectionObserver(). make a variable that will store options inside the object for that intersectionObserver()
----here the object needs first a root property and this root is the element that the target is intersecting. let's go with null value of this property.  then we will be able to observe our target element intersecting the entire viewport. so basically the entire rectangle screen not the whole page but whateveer you can see in one glance or the current portion of the page. 
---- second, we need to define a threshold, that is basically the percentage of intersection at which the observer callback will be called so let set that to 10% i.e is 0.1
---- we can have multiple thresholds, so here we can have an array like threshold : [.1 , .5 ,. 8] 
---- 0 means callback will be called everytime whenever our target element moves completely out of the view and also as soon it enters the view 
----1 means callback will only be called when 100% of thee target is actually visible in the viewport


const observerObject = {
 root : null,
 threshold : 0.1
}


// Step 4 : let create the callback that we will put into the intersectionObserver(). make a variable that will store callbackfunction for that intersectionObserver()
-----So this callback function will be called each time that the observed element so our target element i.e section1 is intersecting the root element at the threshold that we defined
-----So in the current example, whenever the section1  is intersecting the viewport at 10% so the viewport because that's the root and at 10% because that's the threshold. So whenever that happens, then this function here will be called no matter if we are scrolling up or down
-----And this function will get called with two arguments so we can specify them here and that's the entries and observer i.e new Intersection one
-----Entries are basically an object having only one key value pair and inside the first  key  contains a lot of important stuffs like boundingClientRect,intersectionRect,target etc 
-----So let take that out using ForEach and console the entry
---- now what actually happening is if i will start scrolling after some scroll we will get over first entry which appeared here because our target element came into the viewport, it can be down or up side of the viewport , if the target element is visible , the callback will triggered and you can see the property whether it's intersecting or not i.e isIntersecting : true/false

-----if the threshold amount of target element is intersected  to the viewport then only isIntersecting:true, else false
-----so to make our nav sticky we have to use the target element to a header so when header is out of the view we will make the nav sticky 
const observerCallback = function(entries,observer){
   entries.forEach(entry=>{
        console.log(entry) 
   })    
}




// Step 5 : put the callback function and the object that has some options/attributes inside the IntersectionObserver()
const observer = new IntersectionObserver( observerCallback , observerObject );   

OverAll Code for sticky navbar apporach using intersection observer API :

const observerCallback = function (entries, observer) {

  entries.forEach(entry => {

    if (entry.isIntersecting) {
      nav.classList.remove('sticky');
    }
     else {
      nav.classList.add('sticky');
    }

  });
};

const heightX = nav.getBoundingClientRect().height;

const observerObject = {
  root: null,
  threshold: 0,
  rootMargin: `-${heightX}px`,
};
const observer = new IntersectionObserver(observerCallback, observerObject);
observer.observe(header);


  






